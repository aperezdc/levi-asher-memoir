#! /usr/bin/env python
# -*- coding: utf-8 -*-

from HTMLParser import HTMLParser
from os import path, listdir
import sys


charref_table = {
    "145": "'",
    "146": "'",
    "149": u"Ã­".encode("latin1"),
    "151": " ",

    # Those are strange things that is better to ignore
    "01" : "",
    "19" : "",
    "20" : "",
    "21" : "",
}
entityref_table = {
    "quot": "\"",
    "nbsp": " ",
    "amp" : "&amp;",
    "lt"  : "&lt;",
    "gt"  : "&gt;",
}


EPUB_CH_START = """\
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
 <head>
  <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8" />
  <title>%s</title>
 </head>
"""
EPUB_CH_END = """\
</html>
"""


class GenParser(HTMLParser, object):
    def __init__(self):
        super(GenParser, self).__init__()
        self.stack = []

    def handle_starttag(self, tag, attr):
        attr = dict(attr)
        self.stack.append((tag, attr))
        f = getattr(self, "handle_%s_start" % tag, None)
        if f is not None: f(attr)

    def handle_endtag(self, tag):
        if self.stack[-1][0] != tag:
            # Try to fix up b0rked HTML
            tagindex = None
            for i in reversed(xrange(len(self.stack))):
                if self.stack[i][0] == tag:
                    tagindex = i
                    break

            if tagindex is None:
                # No tag found in the stack, still we get a close tag...
                # Assume the tag was not ever opened, and do not call
                # any callback.
                return

            for tag, attr in reversed(self.stack[tagindex:]):
                # Item found: pop all items calling their callbacks
                # and remove them from the stack
                self.handle_endtag(tag)
            del self.stack[tagindex:]
        else:
            f = getattr(self, "handle_%s_end" % tag, None)
            if f is not None: f(self.stack[-1][1])
            del self.stack[-1]


class LinkGrabber(GenParser):
    def __init__(self):
        super(LinkGrabber, self).__init__()
        self.links = []
        self.cur_href = None
        self.cur_text = None

    def handle_a_start(self, attr):
        if "href" in attr:
            self.cur_href = attr["href"]
            self.cur_text = []

    def handle_a_end(self, attr):
        if self.cur_href and self.cur_text:
            text = "".join(self.cur_text)
            if text.startswith("Chapter "):
                self.links.append((text, self.cur_href))
        self.cur_href = self.cur_text = None

    def handle_data(self, data):
        if self.cur_href:
            self.cur_text.append(data)


from itertools import imap, takewhile


class Node(object):
    def __init__(self, tagname, content=(), **kw):
        super(Node, self).__init__()
        self._tagname = tagname
        self._content = []
        self.parent = None
        self.attr = kw
        self.extend(content)

    def __repr__(self):
        return "%s(%r, [%s])" % (self.__class__.__name__,
                                 self._tagname,
                                 ", ".join(map(repr, self)))

    def flatten_content(self):
        return u"".join((imap(lambda x: x.flatten() if isinstance(x, Node)
                              else unicode(x), self)))

    def flatten(self):
        content_string = self.flatten_content()
        attr_string = "".join((" %s='%s'" % (key, val)
                               for key, val in self.attr.iteritems()))


        if content_string is None:
            return u"<%s%s/>" % (self._tagname, attr_string)
        else:
            return u"<%s%s>%s</%s>" % (self._tagname,
                                       attr_string,
                                       content_string,
                                       self._tagname)

    __contains__ = lambda self, item: item in self._content
    __getitem__  = lambda self, idx: self._content[idx]
    __len__      = lambda self: len(self._content)
    __reversed__ = lambda self: reversed(self._content)
    __iter__     = lambda self: iter(self._content)

    def append(self, item):
        assert isinstance(item, (Node, str, unicode))
        if isinstance(item, Node):
            item.parent = self
        return self._content.append(item)

    def insert(self, location, item):
        assert isinstance(item, (Node, str, unicode))
        if isinstance(item, Node):
            item.parent = self
        return self._content.insert(location, item)

    def extend(self, items):
        [self.append(item) for item in items]

    def pop(self):
        item = self._content.pop()
        item.parent = None
        return item

    def clear(self):
        for child in self:
            child.parent = None
        self._content = []

    def remove(self, item):
        self._content.remove(item)
        item.parent = None

    @property
    def tagname(self):
        return self._tagname

    def has_parent(self, nodeclass=None):
        if nodeclass is None:
            return self.parent is not None
        elif self.parent is None:
            return False
        elif isinstance(self.parent, nodeclass):
            return True
        else:
            return self.parent.has_parent(nodeclass)

    def instance_of(self, nodeclass, recursive=False):
        return isinstance(self, nodeclass) or \
                (recursive and self.has_parent(nodeclass))

    def sanitized_content(self):
        # We have to use a list with the contents copied, to
        # avoid an infinite loop when a sanitized() method
        # modifies the parent's contents.
        return (n for n in [node.sanitized() for node in self] if n is not None)

    def sanitized(self):
        return self.__class__(self._tagname, self.sanitized_content())


class ConcreteNode(Node):
    tagname = None

    def __init__(self, content=()):
        tagname = self.__class__.tagname
        if tagname is None:
            tagname = self.__class__.__name__
            assert tagname.endswith("Node")
            assert len(tagname) > 4
            tagname = tagname[:-4].lower()
        super(ConcreteNode, self).__init__(tagname, content)

    def sanitized(self):
        return GhostNode(self.sanitized_content())

    def __repr__(self):
        return "%s([%s])" % (self.__class__.__name__,
                             ", ".join(imap(repr, self)))


class EmptyNode(ConcreteNode):
    def __init__(self, content=()):
        super(EmptyNode, self).__init__()
        self._content = ()

    def flatten_content(self):
        return None

    def flatten(self):
        return super(EmptyNode, self).flatten()


class GhostNode(ConcreteNode):
    tagname = "!ghost"

    def flatten(self):
        return self.flatten_content()


class ANode(ConcreteNode):
    def sanitized(self):
        href = self.attr.get("href", None)
        if href is None:
            return GhostNode(self.sanitized_content())
        else:
            return ANode(self.sanitized_content(), href=href)


class BlockquoteNode(ConcreteNode): pass
class StrongNode(ConcreteNode): pass
class EmNode(ConcreteNode): pass
class SpanNode(GhostNode): pass
class HrNode(EmptyNode): pass


class BrNode(EmptyNode):
    def sanitized(self):
        if not self.parent:
            return None

        if not self.parent.instance_of(PNode, recursive=True):
            return None

        if len(self.parent):
            last = self.parent[-1]
            if isinstance(last, BrNode):
                return None
        return BrNode()


class PNode(ConcreteNode):
    def flatten_content(self):
        content = super(PNode, self).flatten_content().strip()
        if content.startswith("(This is chapter ") or \
                content.endswith(" of the Internet industry.)"):
                    return None
        return content if len(content) > 0 else None

    def sanitized(self):
        if self.parent and self.parent.instance_of(PNode, recursive=True):
            self.parent.extend(self.sanitized_content())
            return None
        newnode = PNode(self.sanitized_content())
        # Make sure there are no dangling <br/> items at the end
        while len(newnode) and isinstance(newnode[-1], BrNode):
            newnode.pop()
        return newnode

    def flatten(self):
        return "\n%s\n" % super(PNode, self).flatten()


class ImgNode(Node):
    def __init__(self, href, alt=None):
        basename = href.split("/")[-1]
        super(ImgNode, self).__init__("img", src="img/" + basename,
                                      alt=(alt or basename))
        self._href = href

    def flatten_content(self):
        return None

    def flatten(self):
        return u"%s<!-- img: %s -->" % (super(ImgNode, self).flatten(),
                                        self._href)

    def sanitized(self):
        newnode = ImgNode(self._href, self.attr["alt"])
        if not (self.parent and self.parent.instance_of(PNode, recursive=True)):
            newnode = PNode((newnode,))
        return newnode


class TextNode(EmptyNode):
    tagname = "!text"

    def __init__(self, content=()):
        super(TextNode, self).__init__()
        if isinstance(content, (str, unicode)):
            self._content = [content]
        else:
            self._content = list(content)

    def flatten_content(self):
        return u"".join(self)

    flatten = flatten_content

    def sanitized(self):
        parent = self.parent
        if parent and not parent.instance_of(PNode, recursive=True):
            # Not inside a paragraph: split the parent's list of contents:
            # generate a number of paragraphs, splitting at <br> items
            i = iter(parent)
            newcontents = []
            while True:
                pcontent = list(takewhile(lambda x: not isinstance(x, BrNode), i))
                if len(pcontent):
                    newcontents.append(PNode(pcontent).sanitized())
                else:
                    break
            parent.clear()
            parent.extend(newcontents)
            return None

        newnode = TextNode(self.sanitized_content())
        if not (self.parent and self.parent.instance_of(PNode, recursive=True)):
            newnode = PNode((newnode,))
        if self.flatten_content().strip():
            return newnode
        else:
            return None

    def sanitized_content(self):
        return iter(self._content)


class Detox(GenParser):

    inline_classes = (EmNode, StrongNode, SpanNode)

    def __init__(self):
        super(Detox, self).__init__()
        self.root = Node("body")
        self.node = self.root
        self.grab = False
        self.title = None
        self.opentags = []

    def handle_data(self, s):
        if self.grab:
            self._push(TextNode, s)
            self._pop(TextNode)

    def handle_title_start(self, attr):
        self.grab = True
        self.node = PNode()

    def handle_title_end(self, attr):
        self.title = self.node.flatten_content() \
                              .split("|")[0] \
                              .capitalize() \
                              .strip()
        self.node = self.root
        self.grab = False

    def handle_div_start(self, attr):
        classes = frozenset(attr.get("class", "").split())
        if "field-name-body" in classes and "field-type-text-with-summary" in classes:
            self.grab = True

    def handle_div_end(self, attr):
        classes = frozenset(attr.get("class", "").split())
        if "field-name-body" in classes and "field-type-text-with-summary" in classes:
            self.grab = False

    def handle_img_end(self, attr):
        if self.grab and "src" in attr:
            self.node.append(ImgNode(attr.get("src"), attr.get("alt", None)))

    def handle_br_start(self, attr):
        if self.grab:
            self.node.append(BrNode())

    def handle_p_start(self, attr):
        if self._push(PNode):
            [self.handle_starttag(tag, ()) for tag in self.opentags]

    def handle_p_end(self, attr):
        if self.grab:
            [self.handle_endtag(tag) for tag in self.opentags]
            keep = bool(self.node.flatten_content())
            self._pop(PNode)
            if not keep:
                self.node.pop()

    def _push(self, nodeclass, *arg, **kw):
        if self.grab:
            node = nodeclass(*arg, **kw)
            self.node.append(node)
            assert node.parent == self.node
            self.node = node
            if nodeclass in self.inline_classes:
                self.opentags.append(node.tagname)
            return True
        else:
            return False

    def _pop(self, nodeclass):
        node = None
        if self.grab:
            assert isinstance(self.node, nodeclass)
            if nodeclass in self.inline_classes:
                assert self.opentags.pop() == self.node.tagname
            node = self.node
            self.node = self.node.parent
        return node

    def handle_em_start(self, attr): self._push(EmNode)
    def handle_em_end  (self, attr): self._pop (EmNode)
    handle_i_start = handle_em_start
    handle_i_end   = handle_em_end

    def handle_strong_start(self, attr): self._push(StrongNode)
    def handle_strong_end  (self, attr): self._pop (StrongNode)
    handle_b_start = handle_strong_start
    handle_b_end   = handle_strong_end

    def handle_blockquote_start(self, attr): self._push(BlockquoteNode)
    def handle_blockquote_end  (self, attr): self._pop (BlockquoteNode)

    def handle_a_start(self, attr): self._push(ANode)
    def handle_a_end(self, attr):
        node = self._pop(ANode)
        if node:
            href = attr.get("href", None)
            if href:
                if not href.startswith("http://"):
                    href = None
                elif not href.startswith("https://"):
                    href = None
            node.attr["href"] = href


def cmd_chapter_links(argv):
    parser = LinkGrabber()
    [parser.feed(data) for data in sys.stdin]
    for text, href in parser.links:
        print href


def cmd_html_detox(argv):
    parser = Detox()
    if len(argv) and argv[0] == "no-images":
        # FIXME: parser.handle_img_start = parser.handle_img_end = None
        pass

    [parser.feed(data.decode("utf-8")) for data in sys.stdin]

    # Insert the title as <h1> at the beginning of the body
    tree = parser.root.sanitized()
    tree.insert(0, Node("h1", TextNode((parser.title,))))

    print EPUB_CH_START % parser.title
    print tree.flatten().encode("utf-8")
    print EPUB_CH_END

def opf_toc_itemrefs(item_ids):
    items = ("<itemref idref=\"%s\" />" % i for i in item_ids)
    return "\n".join(items)


_IMG_MIMETYPE = {
    "jpg" : "image/jpeg",
    "jpeg": "image/jpeg",
    "png" : "image/png",
    "gif" : "image/gif",
}

def opf_manifest(item_ids):
    items = ["<item id=\"%s\" href=\"%s.xhtml\" media-type=\"application/xhtml+xml\"/>"
             % (i, i) for i in item_ids]

    for name in listdir(path.join(path.dirname(__file__), "OEBPS", "img")):
        ext = name.split(".")[-1].lower()
        items.append("<item id=\"img-%s\" href=\"img/%s\" media-type=\"%s\"/>"
                     % (name, name, _IMG_MIMETYPE.get(ext, "image/jpeg")))
    return "\n\t".join(items)


def ncx_nav_points(ids, titles):
    assert len(ids) == len(titles)
    items = (("<navPoint class=\"chapter\" id=\"%s\" playOrder=\"%i\">"
              "<navLabel><text>%s</text></navLabel>"
              "<content src=\"%s.xhtml\" />"
              "</navPoint>") % (ids[i], i+1, titles[i], ids[i])
             for i in xrange(len(titles)))
    return "\n\t".join(items)


def cmd_expand_template(argv):
    if len(argv) != 1:
        raise SystemExit("Usage: xtool expand-template indexfile < in > out")

    links = None
    with file(argv[0], "rU") as indexfd:
        parser = LinkGrabber()
        [parser.feed(data) for data in indexfd]
        links = parser.links

    itemidlist = [href.split("/")[-1] for _, href in links]
    chaptitles = [text.title() for text, _ in links]

    expandvars = {
        "BOOK_TITLE"      : "The Memoir",
        "BOOK_AUTHOR"     : "Levi Asher",
        "OPF_MANIFEST"    : opf_manifest(itemidlist),
        "NCX_NAV_POINTS"  : ncx_nav_points(itemidlist, chaptitles),
        "OPF_TOC_ITEMREFS": opf_toc_itemrefs(itemidlist),
    }

    from string import Template
    print Template(sys.stdin.read()).safe_substitute(expandvars)


if __name__ == "__main__":
    def usage():
        print >> sys.stderr, "Usage:", sys.argv[0], "command [command-args..]"
        print >> sys.stderr, "Available commands:"
        for name in globals().keys():
            if name.startswith("cmd_"):
                print >> sys.stderr, " -", name[4:].replace("_", "-")
        raise SystemExit(1)

    if len(sys.argv) < 2:
        usage()

    cmdname = "cmd_" + sys.argv[1].replace("-", "_")
    if not cmdname in globals():
        usage()

    cmdfunc = globals()[cmdname]
    cmdfunc(sys.argv[2:])


